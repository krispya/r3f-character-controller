/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React, { useEffect, useRef } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    Body: THREE.SkinnedMesh;
    Hips: THREE.Bone;
  };
  materials: {
    ['combined_material_9554669693.001']: THREE.MeshStandardMaterial;
  };
};

// type ActionName = 'Dance 1' | 'Pose 1' | 'Walking';
// type GLTFActions = Record<ActionName, THREE.AnimationAction>;

export function Wander(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>(null!);
  const { nodes, materials, animations } = useGLTF('/wander.glb') as GLTFResult;
  const { actions } = useAnimations<any>(animations, group);

  //   useEffect(() => {
  //     actions?.Walking?.play();
  //   }, [actions?.Idle]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" position={[0.0904, -0.35, 0.0232]} rotation={[-0.0187, -0.0546, 0.125]}>
          <primitive object={nodes.Hips} />
          <skinnedMesh
            name="Body"
            geometry={nodes.Body.geometry}
            material={materials['combined_material_9554669693.001']}
            skeleton={nodes.Body.skeleton}
            morphTargetDictionary={nodes.Body.morphTargetDictionary}
            morphTargetInfluences={nodes.Body.morphTargetInfluences}
            receiveShadow
            castShadow
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload('/wander.glb');
